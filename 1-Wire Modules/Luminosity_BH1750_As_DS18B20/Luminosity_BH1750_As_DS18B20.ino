
//----------------------------------------------------------------------------------------------------------------
#include "OneWireHub.h"
#include "DS18B20.h"  // Digital Thermometer, 12bit
#include "BH1750.h"
#include <Wire.h>
// ----------------------------------------------------------------------------------------------------------------
/*
 ПРОШИВКА ДЛЯ ОПРОСА ДАТЧИКА BH1750, и выдачи его показаний освещённости
 
 ПРОШИВКА ВЫДАЁТ НАРУЖУ ПОКАЗАНИЯ, ПРИКИДЫВАЯСЬ ДАТЧИКОМ DS18B20. ДЛЯ НАСТРОЙКИ ТАКОГО МОДУЛЯ
 НЕОБХОДИМО ПОДКЛЮЧИТЬ ЕГО К ЛИНИИ 1-WIRE КОНТРОЛЛЕРА, ЗАЙТИ В ОКНО "ПРИВЯЗКИ ЖЕЛЕЗА" КОНФИГУРАТОРА,
 И НА СТРАНИЦЕ "ЭМУЛЯТОРЫ DS18B20" УКАЗАТЬ НОМЕР ПИНА, К КОТОРОМУ ПОДКЛЮЧЕН МОДУЛЬ, УКАЗАТЬ, ЧТО ЭТО
 ДАТЧИК ОСВЕЩЁННОСТИ, И УКАЗАТЬ РЕЗУЛЬТИРУЮЩИЙ ИНДЕКС ДАТЧИКА (НАПРИМЕР, 0 - ДЛЯ ПЕРВОГО ТАКОГО ДАТЧИКА НА ЛИНИИ,
 1 - ДЛЯ ВТОРОГО И Т.Д.)
 
 Пины, которые использует плата модуля с датчиками:

  D2 - линия регистрации модуля в системе (1-Wire)
  SDA, SCL - для работы с I2C
 */

//----------------------------------------------------------------------------------------------------------------
/*
 Используемые типы датчиков, известные на линии 1-Wire. Если к типу нет комментария - это значение лучше не использовать в эмуляторе!!!
    0x01
    0x05
    0x09
    0x0F
    0x10  - DS18S20, температурный датчик, 9 байт скратчпад с данными
    0x1D
    0x20
    0x22 - DS1822, температурный датчик, 9 байт скратчпад с данными
    0x23
    0x26
    0x28 - DS18B20, температурный датчик, 9 байт скратчпад с данными
    0x29
    0x2C
    0x2D
    0x3A
    0xA0 - датчик влажности почвы, 9 байт скратчпад с данными точно такой же, как у DS18B20. Используется эмуляция DS18B20
    0xA1 - датчик влажности и температуры, 9 байт скратчпад с данными точно такой же, как у DS18B20. Используется эмуляция DS18B20
    0xA2 - датчик освещённости, скратчпад, 9 байт скратчпад с данными точно такой же, как у DS18B20. Используется эмуляция DS18B20
    0xFC
 */
//----------------------------------------------------------------------------------------------------------------
// НАСТРОЙКИ ПРОШИВКИ
//----------------------------------------------------------------------------------------------------------------
#define _DEBUG // раскомментировать для отладочного режима (плюётся в Serial, )
#define ONEWIRE_PIN                   2 // номер пина 1-Wire
#define SENSOR_UPDATE_INTERVAL        2000 // интервал обновления данных с датчика, миллисекунд

// АДРЕС МОДУЛЯ НА ЛИНИИ 1-WIRE МЕНЯТЬ ЗДЕСЬ! ЗНАЧЕНИЕ ПОСЛЕДНЕГО БАЙТА ПЕРЕД ЗАКРЫВАЮЩЕЙ СКОБКОЙ (например, сменить 0x00 на 0x01 и т.п.)
// КАЖДЫЙ ДАТЧИК НА ОДНОЙ ЛИНИИ 1-WIRE ОБЯЗАН ИМЕТЬ УНИКАЛЬНЫЙ АДРЕС !!!

// указываем 0xA2 - как тип данных освещённости, в остальном - датчик ведёт себя ровно так же, как DS18B20
auto ds18b20 = DS18B20(/*DS18B20::family_code*/0xA2, 0x00, 0x00, 0xB2, 0x18, 0xDA, 0x00);   // DS18B20: 9-12bit, -55 -  +85 degC
//----------------------------------------------------------------------------------------------------------------
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// \/
//----------------------------------------------------------------------------------------------------------------
constexpr uint8_t pin_onewire{ ONEWIRE_PIN };
auto hub = OneWireHub(pin_onewire);
uint32_t sensorUpdateTimer = 0;
BH1750Support bh1750;
//----------------------------------------------------------------------------------------------------------------
long ReadSensor()
{
	long val = bh1750.GetCurrentLuminosity();

#ifdef _DEBUG
	Serial.print(F("Val: "));
	Serial.println(val);
#endif  

  if(val > 65535)
  {
    val = 65535;
  }

  return val;

}

//----------------------------------------------------------------------------------------------------------------
void setup()
{
  #ifdef _DEBUG
	  Serial.begin(115200);
  #endif

  Wire.begin();
  bh1750.begin(BH1750Address1); // датчик BH1750 с первым адресом на шине

	hub.attach(ds18b20);

}

//----------------------------------------------------------------------------------------------------------------
void loop()
{

	hub.poll();
 /*
	if(hub.hasError()) 
	{
	  hub.printError();
	}
*/
	if (millis() - sensorUpdateTimer >= SENSOR_UPDATE_INTERVAL)
	{
		// Set temp
		long luminosity =  ReadSensor();
		ds18b20.setLuminosity(luminosity);
    sensorUpdateTimer = millis();
	
	}

}

//----------------------------------------------------------------------------------------------------------------
